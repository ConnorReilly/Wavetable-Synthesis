#include "glockenspiel_samples.h"
const sample_data glockenspiel_samples[2] = {
	{
		(int16_t*)sample_0_glockenspiel_sinetick, // sample
		false, // LOOP
		7, // LENGTH_BITS
		(1 << (32 - 7)) * CENTS_SHIFT(11) * 44100.0 / NOTE(52) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)72 - 1) << (32 - 7), // MAX_PHASE
		((uint32_t)68 - 1) << (32 - 7), // LOOP_PHASE_END
		(((uint32_t)68 - 1) << (32 - 7)) - (((uint32_t)7 - 1) << (32 - 7)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-5.2)), // INITIAL_ATTENUATION_SCALAR
		RATE_NORMALIZED_ENV_COUNT(0.00), // DELAY_COUNT
		RATE_NORMALIZED_ENV_COUNT(6.20), // ATTACK_COUNT
		RATE_NORMALIZED_ENV_COUNT(240.09), // HOLD_COUNT
		RATE_NORMALIZED_ENV_COUNT(1269.42), // DECAY_COUNT
		RATE_NORMALIZED_ENV_COUNT(306.01), // RELEASE_COUNT
		NEG_INV_COUNT(306.01), // RELEASE_COUNT
		SUSTAIN_DROP(14.9, 1269.42), // SUSTAIN_MULT
		LFO_NORMALIZED_DELAY_COUNT(0.000), // VIBRATO_DELAY
		LFO_INCREMENT(0.001), // VIBRATO_INCREMENT
		LFO_FREQ_MULT(0.001, 0), // VIRBRATO_FREQ_MULT
		LFO_NORMALIZED_DELAY_COUNT(0.000), // MODULATION_DELAY
		LFO_INCREMENT(5.379), // MODULATION_INCREMENT
		LFO_FREQ_MULT(5.379, 0), // MODULATION_FREQ_MULT
		LFO_AMP_MULT(5.379, 0), // MODULTATION_AMP_MULT
	},
	{
		(int16_t*)sample_1_glockenspiel_sinetick, // sample
		false, // LOOP
		7, // LENGTH_BITS
		(1 << (32 - 7)) * CENTS_SHIFT(11) * 44100.0 / NOTE(52) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)72 - 1) << (32 - 7), // MAX_PHASE
		((uint32_t)68 - 1) << (32 - 7), // LOOP_PHASE_END
		(((uint32_t)68 - 1) << (32 - 7)) - (((uint32_t)7 - 1) << (32 - 7)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-5.2)), // INITIAL_ATTENUATION_SCALAR
		RATE_NORMALIZED_ENV_COUNT(0.00), // DELAY_COUNT
		RATE_NORMALIZED_ENV_COUNT(6.20), // ATTACK_COUNT
		RATE_NORMALIZED_ENV_COUNT(240.09), // HOLD_COUNT
		RATE_NORMALIZED_ENV_COUNT(1269.42), // DECAY_COUNT
		RATE_NORMALIZED_ENV_COUNT(306.01), // RELEASE_COUNT
		NEG_INV_COUNT(306.01), // RELEASE_COUNT
		SUSTAIN_DROP(14.9, 1269.42), // SUSTAIN_MULT
		LFO_NORMALIZED_DELAY_COUNT(0.000), // VIBRATO_DELAY
		LFO_INCREMENT(0.001), // VIBRATO_INCREMENT
		LFO_FREQ_MULT(0.001, 0), // VIRBRATO_FREQ_MULT
		LFO_NORMALIZED_DELAY_COUNT(0.000), // MODULATION_DELAY
		LFO_INCREMENT(5.379), // MODULATION_INCREMENT
		LFO_FREQ_MULT(5.379, 0), // MODULATION_FREQ_MULT
		LFO_AMP_MULT(5.379, 0), // MODULTATION_AMP_MULT
	},
};

const uint32_t sample_0_glockenspiel_sinetick[128] = {
0x00000000,0x78bc7a66,0x723075f8,0x676e6d4c,0x590760a7,0x4751508b,0x33203d8a,0x1cfa283a,
0x05e51191,0xee80fa2b,0xd7d7e316,0xc29bccf0,0xaf84b8bc,0x9f67a704,0x92bb9899,0x8a098ddb,
0x85968746,0x85988505,0x8a068740,0x92b18dce,0x9f579891,0xaf73a6f6,0xc274b8ac,0xd7c4ccdc,
0xee6be304,0x05d2fa17,0x1ce8117e,0x330c2827,0x47423d63,0x58f7507a,0x67656097,0x72236d43,
0x78b875f5,0x7aff7a68,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,
};

const uint32_t sample_1_glockenspiel_sinetick[128] = {
0x00000000,0x78bc7a66,0x723075f8,0x676e6d4c,0x590760a7,0x4751508b,0x33203d8a,0x1cfa283a,
0x05e51191,0xee80fa2b,0xd7d7e316,0xc29bccf0,0xaf84b8bc,0x9f67a704,0x92bb9899,0x8a098ddb,
0x85968746,0x85988505,0x8a068740,0x92b18dce,0x9f579891,0xaf73a6f6,0xc274b8ac,0xd7c4ccdc,
0xee6be304,0x05d2fa17,0x1ce8117e,0x330c2827,0x47423d63,0x58f7507a,0x67656097,0x72236d43,
0x78b875f5,0x7aff7a68,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,
};
